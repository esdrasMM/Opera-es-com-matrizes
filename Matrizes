import numpy as np

def metodo_de_chio(matriz):
    n = len(matriz)
    if len(matriz[0]) != n:
        print("A matriz deve ser quadrada para calcular o determinante.")
        return None

    if n == 1:
        return matriz[0][0]
    elif n == 2:
        return matriz[0][0] * matriz[1][1] - matriz[0][1] * matriz[1][0]
    
    # Método de Chió
    if matriz[0][0] == 0:
        print("Método de Chió não pode ser aplicado com zero na primeira posição.")
        return None
    nova_matriz = []
    for i in range(1, n):
        linha = []
        for j in range(1, n):
            valor = (matriz[i][j] * matriz[0][0] - matriz[i][0] * matriz[0][j]) / matriz[0][0]
            linha.append(valor)
        nova_matriz.append(linha)
    return metodo_de_chio(nova_matriz)

def calcular_inversa(matriz):
    n = len(matriz)
    if len(matriz[0]) != n:
        print("A matriz deve ser quadrada para calcular a inversa.")
        return None

    determinante = metodo_de_chio(matriz)
    if determinante == 0:
        print("A matriz não possui inversa pois o determinante é zero.")
        return None

    # Matriz aumentada
    matriz_identidade = np.eye(n)
    matriz_aumentada = np.hstack((matriz, matriz_identidade))

    # Método de Gauss-Jordan
    for i in range(n):
        if matriz_aumentada[i][i] == 0:
            for k in range(i+1, n):
                if matriz_aumentada[k][i] != 0:
                    matriz_aumentada[[i, k]] = matriz_aumentada[[k, i]]
                    break
        matriz_aumentada[i] = matriz_aumentada[i] / matriz_aumentada[i][i]
        for j in range(n):
            if i != j:
                matriz_aumentada[j] = matriz_aumentada[j] - matriz_aumentada[j][i] * matriz_aumentada[i]
    
    return matriz_aumentada[:, n:]

def multiplicar_matrizes(matriz_a, matriz_b):
    if len(matriz_a[0]) != len(matriz_b):
        print("As matrizes não podem ser multiplicadas. O número de colunas da primeira matriz deve ser igual ao número de linhas da segunda matriz.")
        return None

    return np.dot(matriz_a, matriz_b)

def entrada_matriz(ordem):
    print(f"Digite os elementos da matriz {ordem}x{ordem}:")
    matriz = []
    for i in range(ordem):
        linha = list(map(float, input(f"Linha {i+1}: ").split()))
        matriz.append(linha)
    return np.array(matriz)

def main():
    print("Escolha uma das opções:")
    print("1 - Calcular determinante")
    print("2 - Calcular inversa")
    print("3 - Multiplicar matrizes")
    escolha = input("Digite sua escolha: ")

    if escolha == "1":
        ordem = int(input("Digite a ordem da matriz: "))
        matriz = entrada_matriz(ordem)
        determinante = metodo_de_chio(matriz)
        if determinante is not None:
            print(f"O determinante da matriz é: {determinante}")
    elif escolha == "2":
        ordem = int(input("Digite a ordem da matriz: "))
        matriz = entrada_matriz(ordem)
        inversa = calcular_inversa(matriz)
        if inversa is not None:
            print("A matriz inversa é:")
            print(inversa)
    elif escolha == "3":
        ordem_a = tuple(map(int, input("Digite a ordem da primeira matriz (linhas colunas): ").split()))
        ordem_b = tuple(map(int, input("Digite a ordem da segunda matriz (linhas colunas): ").split()))
        if ordem_a[1] != ordem_b[0]:
            print("As matrizes não podem ser multiplicadas. O número de colunas da primeira matriz deve ser igual ao número de linhas da segunda matriz.")
        else:
            print("Digite os elementos da primeira matriz:")
            matriz_a = []
            for _ in range(ordem_a[0]):
                matriz_a.append(list(map(float, input().split())))
            print("Digite os elementos da segunda matriz:")
            matriz_b = []
            for _ in range(ordem_b[0]):
                matriz_b.append(list(map(float, input().split())))
            resultado = multiplicar_matrizes(np.array(matriz_a), np.array(matriz_b))
            print("O resultado da multiplicação é:")
            print(resultado)
    else:
        print("Opção inválida.")

if __name__ == "__main__":
    main()
